int PushBtn = 7;  // 버튼 핀
int LED = 12;      // LED 핀

int LED_state = LOW;  // LED 상태 (LOW 또는 HIGH)
int Btn_state = LOW;  // 이전 버튼 상태
int Btn_newstate;     // 현재 버튼 상태

unsigned long lastDebounceTime = 0;  // 마지막 디바운스 시간
unsigned long debounceDelay = 50;    // 디바운스 지연 시간 (50ms)

void setup() {
  Serial.begin(57600);  // 직렬 통신 시작
  pinMode(PushBtn, INPUT);  // 버튼 핀 입력 모드
  pinMode(LED, OUTPUT);     // LED 핀 출력 모드
  Btn_state = digitalRead(PushBtn);  // 초기 버튼 상태 읽기
  Serial.println("System initialized.");
}

void loop() {
  int Btn_reading = digitalRead(PushBtn);  // 현재 버튼 상태 읽기

  // 버튼 상태 변화가 있을 때만 처리
  if (Btn_reading != Btn_state) {
    lastDebounceTime = millis();  // 상태 변화 시 디바운스 시간 갱신
  }

  // 디바운스 후 상태 확인
  if ((millis() - lastDebounceTime) > debounceDelay) {
    if (Btn_reading != Btn_newstate) {
      Btn_newstate = Btn_reading;

      // 버튼이 눌린 경우
      if (Btn_newstate == HIGH) {
        if (LED_state == LOW) {
          digitalWrite(LED, HIGH);  // LED 켜기
          LED_state = HIGH;  // LED 상태 변경
          Serial.println("LED ON, Command: AT+SEND=2, 1, H");
        }
      }
      // 버튼이 떼어진 경우
      else {
        if (LED_state == HIGH) {
          digitalWrite(LED, LOW);  // LED 끄기
          LED_state = LOW;  // LED 상태 변경
          Serial.println("LED OFF, Command: AT+SEND=2, 1, L");
        }
      }
    }
  }

  Btn_state = Btn_reading;  // 이전 버튼 상태 업데이트
}
